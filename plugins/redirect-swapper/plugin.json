{
    "name": "Redirect Swapper",
    "id": "redirect-swapper",
    "description": "Redirect and swap assets",
    "author": "Dev",
    "src": [
        {
            "type": "domloaded",
            "src": "let redirectswapper_sortedAnimalList = [];\n\nlet redirectswapper_petsList = [];\n\nconst redirectswapper_redirectSwapperOpenButton = document.createElement(\"button\");\nredirectswapper_redirectSwapperOpenButton.classList.add(\"assetswapper-new-button\");\nredirectswapper_redirectSwapperOpenButton.innerText = \"Redirect\";\nassetSwapperNewButton.parentElement.insertBefore(redirectswapper_redirectSwapperOpenButton, assetSwapperNewButton.nextElementSibling);\n\nconst redirectswapper_redirectSwapperManagerDiv = DRC.Modal.buildModal(\"redirectswapper_\", \"Redirect Swapper\", `\n<button id=\"redirectswapper_newButton\" class=\"assetswapper-new-button assetswapper-add-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\n                        class=\"bi bi-plus\" viewBox=\"0 0 16 16\">\n                        <path\n                            d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\n                    </svg>New</button>\n<div id=\"redirectswapper_ruleList\"></div>\n`, true);\n\nconst redirectswapper_newButton = document.getElementById(\"redirectswapper_newButton\");\nconst redirectswapper_ruleList = document.getElementById(\"redirectswapper_ruleList\");\n\nconst redirectswapper_redirectSwapperNewDiv = DRC.Modal.buildModal(\"redirectswapper_newRedirect\", \"New Redirect\", `\n<div>Template: \n<select id=\"redirectswapper_OptionsTemplateCategory\">\n    <option value=\"assets\">Assets</option>\n    <option value=\"animals\">Animals</option>\n    <option value=\"pets\">Pets</option>\n    <option value=\"terrains\">Terrains</option>\n</select>\n<select id=\"redirectswapper_OptionsTemplate\">\n</select>\n</div>\n<div class=\"assetswapper-list-rule\">\n<input type=\"text\" id=\"redirectswapper_OptionsSource\" placeholder=\"Source URL\">\n<div class=\"spacer\"></div>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\n        class=\"bi bi-arrow-right\" viewBox=\"0 0 16 16\">\n        <path fill-rule=\"evenodd\"\n            d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\" />\n</svg>\n<div class=\"spacer\"></div>\n<input type=\"text\" id=\"redirectswapper_OptionsRedirect\" placeholder=\"Destination URL\">\n</div>\n<button id=\"redirectswapper_addButton\" class=\"assetswapper-add-button\">Add</button>\n`, true);\n\nconst redirectswapper_addButton = document.getElementById(\"redirectswapper_addButton\");\n\nconst redirectswapper_OptionsSource = document.getElementById(\"redirectswapper_OptionsSource\");\nconst redirectswapper_OptionsRedirect = document.getElementById(\"redirectswapper_OptionsRedirect\");\nconst redirectswapper_OptionsTemplate = document.getElementById(\"redirectswapper_OptionsTemplate\");\nconst redirectswapper_OptionsTemplateCategory = document.getElementById(\"redirectswapper_OptionsTemplateCategory\");\n\nfunction redirectswapper_updateRedirectList() {\n    redirectswapper_ruleList.innerHTML = \"\";\n    for (let i in settings.pluginUserData[\"redirect-swapper\"].redirects) {\n        const mainElem = document.createElement(\"div\");\n        mainElem.classList.add(\"assetswapper-list-rule\");\n        // redirect source\n        const sourceElem = document.createElement(\"p\");\n        sourceElem.innerText = settings.pluginUserData[\"redirect-swapper\"].redirects[i].sourceUrl;\n        mainElem.appendChild(sourceElem);\n        const spacer1 = document.createElement(\"div\");\n        spacer1.classList.add(\"spacer\");\n        mainElem.appendChild(spacer1);\n        // => icon\n        const iconElem = document.createElement(\"div\");\n        mainElem.appendChild(iconElem);\n        iconElem.outerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\n        class=\"bi bi-arrow-right\" viewBox=\"0 0 16 16\">\n        <path fill-rule=\"evenodd\"\n            d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\" />\n    </svg>`;\n        const spacer2 = document.createElement(\"div\");\n        spacer2.classList.add(\"spacer\");\n        mainElem.appendChild(spacer2);\n        // Destination URL\n        const destionationElem = document.createElement(\"p\");\n        destionationElem.innerText = settings.pluginUserData[\"redirect-swapper\"].redirects[i].redirectUrl;\n        mainElem.appendChild(destionationElem);\n        const spacer3 = document.createElement(\"div\");\n        spacer3.classList.add(\"spacer\");\n        mainElem.appendChild(spacer3);\n        // Delete button\n        const deleteElem = document.createElement(\"button\");\n        deleteElem.classList.add(\"assetswapper-new-button\");\n        deleteElem.innerText = \"Delete\";\n        deleteElem.addEventListener(\"click\", () => {\n            settings.pluginUserData[\"redirect-swapper\"].redirects = settings.pluginUserData[\"redirect-swapper\"].redirects.filter(item => item != settings.pluginUserData[\"redirect-swapper\"].redirects[i]);\n            saveSettings();\n            redirectswapper_updateRedirectList();\n        });\n        mainElem.appendChild(deleteElem);\n        redirectswapper_ruleList.appendChild(mainElem);\n    }\n}\n\nredirectswapper_OptionsTemplateCategory.addEventListener(\"change\", () => {\n    let templateDropdown = \"\";\n    switch (redirectswapper_OptionsTemplateCategory.value) {\n        case \"assets\":\n            templateDropdown = `\n            <option value=\"assets1\">Assets 1</option>\n            <option value=\"assets2\">Assets 2</option>\n            <option value=\"assets3\">Assets 3</option>\n            `;\n            break;\n        case \"animals\":\n            // animalList.push({\n            //     name: translations[animals[i].name + \"-name\"] ?? animals[i].name,\n            //     stringId: animals[i].name,\n            //     id: animals[i].id\n            // });\n            for (let i in redirectswapper_sortedAnimalList) {\n                templateDropdown += `\n                <option value=\"${redirectswapper_sortedAnimalList[i].stringId}\">${redirectswapper_sortedAnimalList[i].name}</option>\n                `;\n            }\n            break;\n        case \"pets\":\n            for (let i in redirectswapper_petsList) {\n                templateDropdown += `\n                    <option value=\"${redirectswapper_petsList[i].asset}\">${redirectswapper_petsList[i].name}</option>\n                    `;\n            }\n            break;\n        case \"terrains\":\n            templateDropdown = `\n            <option value=\"beach\">Beach</option>\n            <option value=\"beach_underwater\">Beach Underwater</option>\n            <option value=\"coldterrain\">Cold Terrain</option>\n            <option value=\"coldterrain_back\">Cold Terrain Back</option>\n            <option value=\"deepterrain\">Deep Terrain</option>\n            <option value=\"glacier\">Glacier</option>\n            <option value=\"swamp-island\">Swamp Island</option>\n            <option value=\"swamp-water\">Swamp Water</option>\n            <option value=\"glacier\">Glacier</option>\n            <option value=\"terrain\">Regular</option>\n            <option value=\"terrain_back\">Regular Back</option>\n            `;\n            break;\n    }\n    redirectswapper_OptionsTemplate.innerHTML = templateDropdown;\n    redirectswapper_OptionsTemplate.value = \"\";\n    redirectswapper_OptionsSource.value = \"\";\n});\n\nredirectswapper_OptionsTemplate.addEventListener(\"change\", () => {\n    let sourceUrl = \"\";\n    if (redirectswapper_OptionsTemplateCategory.value === \"assets\") {\n        switch (redirectswapper_OptionsTemplate.value) {\n            case \"assets1\":\n                sourceUrl = \"https://<DEEEEP_URL>/assets/spritesheets/assets.png\";\n                break;\n            case \"assets2\":\n                sourceUrl = \"https://<DEEEEP_URL>/assets/spritesheets/assets-2.png\";\n                break;\n            case \"assets3\":\n                sourceUrl = \"https://<DEEEEP_URL>/assets/spritesheets/assets-3.png\";\n                break;\n        }\n    } else if (redirectswapper_OptionsTemplateCategory.value === \"animals\") {\n        sourceUrl = `https://<DEEEEP_URL>/assets/characters/${redirectswapper_OptionsTemplate.value}.png`;\n    } else if (redirectswapper_OptionsTemplateCategory.value === \"pets\") {\n        sourceUrl = `https://cdn.deeeep.io/custom/pets/${redirectswapper_OptionsTemplate.value}`;\n    } else if (redirectswapper_OptionsTemplateCategory.value === \"terrains\") {\n        sourceUrl = `https://<DEEEEP_URL>/assets/patterns/${redirectswapper_OptionsTemplate.value.replace('-', '/')}.png`;\n    }\n\n    redirectswapper_OptionsSource.value = sourceUrl;\n});\n\nredirectswapper_OptionsSource.addEventListener(\"change\", () => {\n    redirectswapper_OptionsTemplate.value = \"\";\n    redirectswapper_OptionsTemplateCategory.value = \"\";\n});\n\nredirectswapper_addButton.addEventListener(\"click\", () => {\n    let sourceUrlObject;\n    try {\n        sourceUrlObject = new URL(redirectswapper_OptionsSource.value);\n        new URL(redirectswapper_OptionsRedirect.value); // Check the destination URL for good measure\n    } catch (e) {\n        new Notification(\"Could not process URL\", {\n            body: \"Redirect Swapper could not process your URL. Check that it is not malformed.\"\n        });\n        return;\n    }\n    settings.pluginUserData[\"redirect-swapper\"].redirects.push({\n        sourceUrl: redirectswapper_OptionsSource.value,\n        scheme: `*://${sourceUrlObject.host}${sourceUrlObject.pathname}`,\n        redirectUrl: redirectswapper_OptionsRedirect.value\n    });\n\n    saveSettings();\n    ipcRenderer.send(\"redirectswapper_refreshListeners\");\n    redirectswapper_redirectSwapperNewDiv.classList.add(\"drc-modal-hidden\");\n\n    redirectswapper_updateRedirectList();\n\n    new Notification(\"Redirect saved!\", {\n        body: \"URL redirects have been refreshed.\"\n    });\n});\n\nredirectswapper_redirectSwapperOpenButton.addEventListener(\"click\", () => {\n    redirectswapper_updateRedirectList();\n\n    redirectswapper_redirectSwapperManagerDiv.classList.toggle(\"drc-modal-hidden\");\n});\n\nredirectswapper_newButton.addEventListener(\"click\", () => {\n    redirectswapper_OptionsSource.value = \"\";\n    redirectswapper_OptionsRedirect.value = \"\";\n    redirectswapper_OptionsTemplate.value = \"\";\n    redirectswapper_OptionsTemplateCategory.value = \"\";\n\n    redirectswapper_redirectSwapperNewDiv.classList.toggle(\"drc-modal-hidden\");\n});\n\n// Set animal list\nsetTimeout(function anon() {\n    // Repeat if the fetch hasn't loaded yet\n    if (animalList.length === 0) {\n        setTimeout(anon, 100);\n        return;\n    }\n    redirectswapper_sortedAnimalList = animalList.sort((a, b) => {\n        var textA = a.name.toUpperCase();\n        var textB = b.name.toUpperCase();\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n    });\n}, 100);\n\n(async () => {\n    redirectswapper_petsList = await fetch(API_URL + \"/pets\", { credentials: \"include\" })\n        .then(response => response.json())\n        .then(pets => pets.sort((a, b) => {\n            var textA = a.name.toUpperCase();\n            var textB = b.name.toUpperCase();\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        }));\n})();"
        },
        {
            "type": "appstart",
            "src": "// init setting if undefined\nif (settings.pluginUserData[\"redirect-swapper\"] === undefined || settings.pluginUserData[\"redirect-swapper\"].redirects === undefined) {\n    settings.pluginUserData[\"redirect-swapper\"] = { redirects: [] };\n    store.set(\"settings\", settings);\n    window.webContents.send(\"settings\", settings);\n}\n\nlet redirectswapper_listeners = [];\n\nfunction redirectswapper_refreshListeners() {\n    console.log(\"Redirect Swapper Listeners have been refreshed\");\n    for (let i in redirectswapper_listeners) {\n        DRC.Main.defaultSession.webRequest.removeListener(redirectswapper_listeners[i].method, redirectswapper_listeners[i].id);\n    }\n\n    for (let i in settings.pluginUserData[\"redirect-swapper\"].redirects) {\n        const method = (details, callback) => {\n            callback({ redirectURL: settings.pluginUserData[\"redirect-swapper\"].redirects[i].redirectUrl });\n        }\n        const listener = DRC.Main.defaultSession.webRequest.addListener(\n            \"onBeforeRequest\",\n            {\n                urls: [settings.pluginUserData[\"redirect-swapper\"].redirects[i].scheme.replace(\"%3Cdeeeep_url%3E\", \"deeeep.io\")]\n            },\n            method\n        );\n        redirectswapper_listeners.push({\n            method,\n            id: listener.id\n        });\n        const listener2 = DRC.Main.defaultSession.webRequest.addListener(\n            \"onBeforeRequest\",\n            {\n                urls: [settings.pluginUserData[\"redirect-swapper\"].redirects[i].scheme.replace(\"%3Cdeeeep_url%3E\", \"beta.deeeep.io\")]\n            },\n            method\n        );\n        redirectswapper_listeners.push({\n            method,\n            id: listener2.id\n        });\n    }\n}\n\nredirectswapper_refreshListeners();\n\nipcMain.on(\"redirectswapper_refreshListeners\", () => redirectswapper_refreshListeners());"
        },
        {
            "type": "install",
            "src": "settings.pluginUserData[\"redirect-swapper\"] = { redirects: [] };"
        }
    ]
}